# @model      - https://docs.amplify.aws/cli/graphql-transformer/directives#model
# @connection - https://docs.amplify.aws/cli/graphql-transformer/directives#connection
# @auth       - https://docs.amplify.aws/cli/graphql-transformer/directives#auth
# @searchable - https://docs.amplify.aws/cli/graphql-transformer/directives#searchable

type Market @model @searchable @auth(rules: [
  { allow: owner, operations: [create, update, delete], identityClaim: "sub" },
]) {
  id: ID!
  name: String!
  products: [Product] @connection(name: "MarketProducts", sortField: "createdAt") # Bi-directional link
  tags: [String]
  createdAt: String
}

type Product @model @auth(rules: [
  { allow: owner, operations: [create, update, delete], identityClaim: "sub" },
]) { # https://docs.amplify.aws/cli/graphql-transformer/directives#owner-authorization
  id: ID!
  description: String!
  market: Market @connection(name: "MarketProducts") # Bi-directional link
  file: S3Object!
  price: Float!
  shipped: Boolean!
  owner: String
  createdAt: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type User @model(
  queries: { get: "getUser" },
  mutations: { create: "registerUser", update: "updateUser" },
  subscriptions: null
) {
  id: ID!
  username: String!
  email: String!
  registered: Boolean
  orders: [Order]  @connection(name: "UserOrders") # Bi-directional link
}

type Order @model(
  queries: null,
  mutations: { create: "createOrder" },
  subscriptions: null
) {
  id: ID!
  user: User @connection(name: "UserOrders") # Bi-directional link
  product: Product @connection  # Uni-directional link
  shippingAddress: ShippingAddress
  createdAt: String
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_state: String!
  address_zip: String!
}
# Custom Queries can be added here
# type Query {}
# type Mutation {}
# type Subscription {}

# @model      - https://docs.amplify.aws/cli/graphql-transformer/directives#model
# @connection - https://docs.amplify.aws/cli/graphql-transformer/directives#connection
# @auth       - https://docs.amplify.aws/cli/graphql-transformer/directives#auth
# @searchable - https://docs.amplify.aws/cli/graphql-transformer/directives#searchable
# @function   - https://docs.amplify.aws/cli/graphql-transformer/directives#function

# The market Model
type Market @model @searchable @auth(rules: [{ allow: owner, operations: [create, update, delete], identityClaim: "sub" }]) 
{
  id: ID!
  createdAt: String # TODO Resolver to create?
  owner: ID! # TODO Find out how to get, but not set
  ownerData: User @function(name: "amplifyagora-GetUser-${env}")
  products: [Product] @connection(name: "MarketProducts", sortField: "createdAt") # Bi-directional link
  name: String!
  tags: [String]
}
 # Input Overrides
input CreateMarketInput {
  name: String!
  tags: [String]
}
input UpdateMarketInput {
  name: String!
  tags: [String]
}

type Product @model @auth(rules: [{ allow: owner, operations: [create, update, delete], identityClaim: "sub" }]) 
{
  id: ID!
  createdAt: String # TODO Resolver to create?
  owner: ID!
  ownerData: User @function(name: "amplifyagora-GetUser-${env}")
  description: String!
  market: Market @connection(name: "MarketProducts") # Bi-directional link
  file: S3Object!
  price: Float!
  shipped: Boolean!
}
 # Input Overrides
input CreateProductInput {
  description: String!
  file: S3ObjectInput!
  price: Float!
  shipped: Boolean!
  productMarketId: ID
}
input UpdateProductInput {
  description: String!
  file: S3ObjectInput!
  price: Float!
  shipped: Boolean!
  productMarketId: ID
}

# File in an S3 Bucket
type S3Object {
  bucket: String!
  region: String!
  key: String!
}
input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

############################

type User @model( 
  queries: { get: "getUser" }, mutations: { update: "updateUser" }, subscriptions: null 
) @auth(rules: [
  { allow: owner, operations: [update], ownerField: "id", identityClaim: "sub" }
]) 
{
  id: ID!
  displayName: String!
  orders: [Order] @connection(name: "UserOrders") # Bi-directional link
}

type Order @model(
  queries: null,
  mutations: { create: "createOrder" },
  subscriptions: null
) {
  id: ID!
  user: User @connection(name: "UserOrders") # Bi-directional link
  product: Product @connection  # Uni-directional link
  shippingAddress: ShippingAddress
  createdAt: String
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_state: String!
  address_zip: String!
}
